{"version":3,"sources":["components/dropdown.js","App.js","serviceWorker.js","index.js"],"names":["Dropdown","props","state","inputVal","listOpen","headerTitle","title","list","addBtn","noOfRecords","noOfRecord","this","setState","prevState","showMore","length","selectedItem","className","onClick","toggleList","icon","faCaretDown","faSearch","type","value","onChange","event","searchItem","placeholder","style","float","e","addItem","slice","map","item","index","key","toggleItem","id","selected","name","showMoreItems","nextProps","count","filter","a","titleHelper","Component","App","toggleSelected","bind","searchHandler","addLocationHandler","showMoreHandler","location","filtered","showItems","fetch","then","res","json","data","console","log","catch","temp","loc","push","currentList","newList","searchString","target","toLowerCase","includes","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.f203176e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport FontAwesome from \"react-fontawesome\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTimes,\r\n  faSearch,\r\n  faCartArrowDown,\r\n  faArrowDown,\r\n  faCaretDown,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./dropdown.css\";\r\n\r\nexport default class Dropdown extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      inputVal: \"\",\r\n      listOpen: false,\r\n      headerTitle: this.props.title,\r\n      list: this.props.list,\r\n      addBtn: this.props.addBtn,\r\n      noOfRecords: this.props.noOfRecord,\r\n    };\r\n  }\r\n  static getDerivedStateFromProps(nextProps) {\r\n    const count = nextProps.list.filter(function (a) {\r\n      return a.selected;\r\n    }).length;\r\n    // const inputV = nextProps.selectedItem\r\n    // console.log('count',inputV)\r\n\r\n    if (count === 0) {\r\n      return { headerTitle: nextProps.title };\r\n    } else if (count === 1) {\r\n      return { headerTitle: `${count} ${nextProps.titleHelper}` };\r\n    }\r\n    // else if(count > 1){\r\n    //   return {headerTitle: `${count} ${nextProps.titleHelper}s`}\r\n    // }\r\n  }\r\n\r\n  handleClickOutside() {\r\n    this.setState({\r\n      listOpen: false,\r\n    });\r\n  }\r\n  toggleList() {\r\n    this.setState((prevState) => ({\r\n      listOpen: !prevState.listOpen,\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    const btnStyle = {\r\n      float: \"none\",\r\n    };\r\n\r\n    const { list } = this.props;\r\n    const { inputVal, listOpen, headerTitle, noOfRecords } = this.state;\r\n    const showMore =\r\n      this.props.noOfRecord != list.length && list.length > 0 && this.props.selectedItem=='' ? true : false;\r\n\r\n    return (\r\n      <div className=\"container DropdownBox\">\r\n        <div onClick={() => this.toggleList()}>\r\n          <div className=\"dd-header-title\">\r\n            {headerTitle} <FontAwesomeIcon icon={faCaretDown} />\r\n          </div>\r\n          {listOpen}\r\n        </div>\r\n        {listOpen && (\r\n          <div className=\"\">\r\n            {\" \"}\r\n            <FontAwesomeIcon icon={faSearch} />\r\n            <input\r\n              type=\"text\"\r\n              className=\"input\"\r\n              value={this.props.selectedItem}\r\n              onChange={(event) => this.props.searchItem(event)}\r\n              placeholder=\"Search...\"\r\n            />\r\n          </div>\r\n        )}\r\n        {this.props.addBtn && (\r\n          <div>\r\n            <p>{this.props.selectedItem}\" not found</p>\r\n            <button style={btnStyle} onClick={(e) => this.props.addItem(e)}>\r\n              Add & Select\r\n            </button>\r\n          </div>\r\n        )}\r\n        {listOpen && (\r\n          <ul className=\"dd-list\">\r\n            {list.slice(0, this.props.noOfRecord).map((item, index) => (\r\n              <li\r\n                className=\"dd-list-item\"\r\n                key={item.title}\r\n                onClick={() => this.props.toggleItem(item.id, item.key)}\r\n              >\r\n                {item.title} {item.selected && <FontAwesome name=\"check\" />}\r\n              </li>\r\n            ))}\r\n            {showMore && (\r\n              <p\r\n                onClick={() => this.props.showMoreItems(this.props.noOfRecord)}\r\n              >\r\n                {this.props.noOfRecord} more...\r\n              </p>\r\n            )}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Dropdown from \"./components/dropdown\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.toggleSelected = this.toggleSelected.bind(this);\n    this.searchHandler = this.searchHandler.bind(this);\n    this.addLocationHandler = this.addLocationHandler.bind(this);\n    this.showMoreHandler = this.showMoreHandler.bind(this);\n    this.state = {\n      location: [],\n      filtered: [],\n      addBtn: false,\n      showItems: 5,\n      selectedItem: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://run.mocky.io/v3/84a96fac-a9c7-4db4-9f33-5cb99276938b\")\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"data\", data);\n        this.setState({ location: data, filtered: data });\n      })\n      .catch(console.log);\n  }\n  toggleSelected(id, key) {\n    let temp = this.state[key];\n    temp[id].selected = !temp[id].selected;\n    this.setState({\n      [key]: temp,\n    });\n  }\n  addLocationHandler(event) {\n    let temp = [...this.state.location];\n    console.log(\"vale new\", this.state.selectedItem);\n    const loc = {\n      id: temp.length,\n      title: this.state.selectedItem,\n      selected: false,\n      key: \"location\",\n    };\n    temp.push(loc);\n    this.setState({\n      location: temp,\n      filtered: temp,\n      showItems: temp.length,\n      selectedItem: \"\",\n    });\n    this.setState((prevState) => ({\n      addBtn: !prevState.addBtn,\n    }));\n  }\n\n  showMoreHandler(showMoreItems) {\n    console.log(\"show more\", showMoreItems);\n    console.log(\"show More \", this.state.filtered);\n    this.setState({\n      showItems:\n        this.state.showItems >= this.state.location.length\n          ? this.state.showItems\n          : this.state.location.length,\n    });\n  }\n\n  searchHandler(e) {\n    let currentList = [...this.state.location];\n    let newList = [];\n    let searchString = e.target.value;\n    // If the search bar isn't empty\n    if (e.target.value !== \"\") {\n      // Assign the original list to currentList\n      console.log(\"string\", e.target.value);\n\n      // Use .filter() to determine which items should be displayed\n      // based on the search terms\n      newList = currentList.filter((item) =>\n        item.title.toLowerCase().includes(searchString.toLowerCase())\n      );\n      this.setState({\n        filtered: newList,\n        selectedItem: e.target.value,\n      });\n      const isAdmin = true; // check add priviledge\n      //Click show all before add button\n      if (newList.length < 1 && isAdmin) {\n        this.setState({\n          addBtn: true,\n          selectedItem: e.target.value,\n        });\n      }\n    } else {\n      // If the search bar is empty, set newList to original task list\n      this.setState({\n        filtered: currentList,\n        addBtn: false,\n        selectedItem: \"\",\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Dropdown\n          titleHelper=\"Location\"\n          title=\"Select a location\"\n          noOfRecord={this.state.showItems}\n          selectedItem={this.state.selectedItem}\n          list={this.state.filtered}\n          toggleItem={this.toggleSelected}\n          searchItem={this.searchHandler}\n          addItem={this.addLocationHandler}\n          showMoreItems={this.showMoreHandler}\n          addBtn={this.state.addBtn}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}